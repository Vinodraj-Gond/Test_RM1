# - name: certbot generate dev cert [http]
#   register: certbot_gen_output_http
#   become: yes
#   shell: |
#     certbot certonly --nginx -d {{ domain }} -m {{ certbot_admin_email }} --test-cert --agree-tos --force-interactive
#   when: dev_certificate | bool

# - name: certbot generate live cert [http]
#   register: certbot_gen_output_http
#   become: yes
#   shell: |
#     certbot certonly --nginx -d {{ domain }} -m {{ certbot_admin_email }} --agree-tos
#   when: not dev_certificate | bool

# - name: certbot generate cert output [http]
#   debug:
#     msg: certbot_gen_output_http.stdout_lines

# - name: certbot generate dev cert [grpc]
#   register: certbot_gen_output_grpc
#   become: yes
#   shell: |
#     certbot certonly --nginx -d grpc.{{ domain }} -m {{ certbot_admin_email }} --test-cert --agree-tos
#   when: dev_certificate | bool

# - name: certbot generate live cert [grpc]
#   register: certbot_gen_output_grpc
#   become: yes
#   shell: |
#     certbot certonly --nginx -d grpc.{{ domain }} -m {{ certbot_admin_email }} --agree-tos
#   when: not dev_certificate | bool

# - name: certbot generate cert output [grpc]
#   debug:
#     msg: certbot_gen_output_grpc.stdout_lines

# - name: Generate a Self Signed OpenSSL certificate
#   openssl_certificate:
#     path: /etc/ssl/crt/{{ domain }}.crt
#     privatekey_path: /etc/ssl/private/{{ domain }}.pem
#     csr_path: /etc/ssl/csr/{{ domain }}.csr
#     provider: selfsigned

- name: create nginx conf [HTTP]
  become: yes
  blockinfile:
    path: "/etc/nginx/conf.d/{{ domain }}.conf"
    backup: yes
    insertafter: EOF
    content: |
      server {
        listen 80;
        listen 443 ssl http2;
        
        server_tokens off;
        server_name {{ domain }};

        client_max_body_size          50m;
        proxy_connect_timeout         600s;
        proxy_send_timeout            600s;
        proxy_read_timeout            600s;

        location / {
            proxy_pass http://127.0.0.1:8080;
        }
        
        #ssl_certificate /etc/letsencrypt/live/{{ domain }}/fullchain.pem;
        #ssl_certificate_key /etc/letsencrypt/live/{{ domain }}/privkey.pem;

        #ssl_session_cache shared:cache_nginx_SSL:1m;
        #ssl_session_timeout 1440m;

        #ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        #ssl_prefer_server_ciphers on;

        #ssl_ciphers "ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS";
        
        #ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
      }

- name: create nginx conf [GRPC]
  become: yes
  blockinfile:
    path: "/etc/nginx/conf.d/grpc.{{ domain }}.conf"
    backup: yes
    insertafter: EOF
    content: |
      server {
        listen 80 http2;
        # listen 443 ssl http2;
        
        server_tokens off;
        server_name grpc.{{ domain }};

        client_max_body_size 600m;
        client_body_timeout 600s;
        grpc_read_timeout 600s;
        grpc_send_timeout 600s;
        grpc_connect_timeout 600s;

        location / {
            grpc_pass grpc://127.0.0.1:8080;
        }

        #ssl_certificate /etc/letsencrypt/live/grpc.{{ domain }}/fullchain.pem;
        #ssl_certificate_key /etc/letsencrypt/live/grpc.{{ domain }}/privkey.pem;

        #ssl_session_cache shared:cache_nginx_SSL:1m;
        #ssl_session_timeout 1440m;

        #ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        #ssl_prefer_server_ciphers on;

        #ssl_ciphers "ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS";
        
        #ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
      }

- name: restart nginx
  become: yes
  service:
    name: nginx
    state: restarted
