# - name: snap install core
#   become: true
#   shell: |
#     snap install core
#     snap refresh core

# - name: remove potential conflicting versions of certbot
#   become: yes
#   apt:
#     name: certbot
#     state: absent

# - name: install certbot
#   register: certbot_install_output
#   become: yes
#   shell: snap install --classic certbot

# - name: certbot generate dev cert
#   register: certbot_gen_output
#   become: yes
#   shell: |
#     certbot certonly --nginx -d {{ domain }} -m {{ certbot_admin_email }} --test-cert --agree-tos
#   when: dev_certificate | bool

# - name: certbot generate live cert
#   register: certbot_gen_output
#   become: yes
#   shell: |
#     certbot certonly --nginx -d {{ domain }} -m {{ certbot_admin_email }} --agree-tos 
#   when: not dev_certificate | bool

# - name: certbot generate cert output
#   debug:
#     var: certbot_gen_output.stdout_lines
 
# - name: "Delete default nginx link"
#   become: true
#   file: "path=/etc/nginx/sites-enabled/default state=absent"
  

# - name: unlink default config in nginx
#   become: yes
#   shell: unlink /etc/nginx/sites-enabled/default




- name: insert ssl to nginx
  become: yes
  blockinfile:
    path: "/etc/nginx/conf.d/{{ domain }}.conf"
    backup: yes
    insertafter: EOF
    content: |
      server {
        listen [::]:443 ssl ipv6only=on;
        listen 80;
        
        server_tokens off;
        server_name {{ domain }};
        root /var/www/{{ domain }};
        index index.html index.htm;

        location /rpc {
            proxy_pass http://127.0.0.1:8044;
        }
        
        # ssl_certificate /etc/letsencrypt/live/{{ domain }}/fullchain.pem;
        # ssl_certificate_key /etc/letsencrypt/live/{{ domain }}/privkey.pem;

        # ssl_session_cache shared:cache_nginx_SSL:1m;
        # ssl_session_timeout 1440m;

        # ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        # ssl_prefer_server_ciphers on;

        # ssl_ciphers "ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS";
        
        # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
      }

- name: restart nginx
  become: yes
  service:
    name: nginx
    state: restarted
