apiVersion: v1
kind: Namespace
metadata:
  name: airtel
  labels:
    app.kubernetes.io/name: airtel
    app.kubernetes.io/part-of: airtel
---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: airtel
  namespace: airtel
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
spec:
  rules:
  - host: airtel.staging.aqilliz.com
    http:
      paths:
      - path: /
        backend:
          serviceName: airtel
          servicePort: subtrate30333
      - path: /rpc
        backend:
          serviceName: airtel
          servicePort: https
      - path: /blockexplorer(/|$)(.*)
        backend:
          serviceName: airtel
          servicePort: block-explorer
---

apiVersion: v1
kind: Service
metadata:
  labels:
    service: airtel
  name: airtel
  namespace: airtel
spec:
  type: ClusterIP
  ports:
  - name: https
    port: 443
    targetPort: 9944
  - name: substrate9615
    port: 9615
    targetPort: 9615
  - name: subtrate9933
    port: 9633
    targetPort: 9633
  - name: subtrate30333
    port: 30333
    targetPort: 30333
  - name: block-explorer
    port: 8080
    targetPort: 80
  selector:
    app: node1-airtel
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: node1-airtel
  namespace: airtel
spec:
  selector:
    matchLabels:
      app: node1-airtel
  replicas: 1
  revisionHistoryLimit: 1
  template:
    metadata:
      labels:
        app: node1-airtel
    spec:
      nodeSelector:
        project: airtel
      hostNetwork: true
      initContainers:
      - name: eip
        image: amazon/aws-cli:2.0.48
        command:
        - /bin/bash
        - -xec
        - |
          INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
          aws ec2 disassociate-address --public-ip "$PUBLIC_IP" || true
          aws ec2 associate-address --public-ip "$PUBLIC_IP" --instance-id "$INSTANCE_ID"
        env:
        - name: PUBLIC_IP
          value: 3.111.63.62
        - name: AWS_REGION
          value: ap-south-1
      - name: ubuntu
        image: mwendler/wget
        command: ["/bin/sh","-c"]
        args: ["wget -O /chain-spec/chainSpec.json --no-check-certificate https://aquila-node-chain-specs.s3-ap-southeast-1.amazonaws.com/airtel/chainSpec.json"]
        volumeMounts:
        - name: chain-spec
          mountPath: /chain-spec/
      containers:
      - name: substrate
        image: 730617358154.dkr.ecr.ap-south-1.amazonaws.com/aquila-substrate-node:v1.0.0
        imagePullPolicy: Always
        resources:
          requests:
            memory: "12Gi"
            cpu: "2000m"
          limits:
            memory: "13Gi"
            cpu: "3500m"
        ports:
        - name: substrate9615
          containerPort: 9615
        - name: subtrate9933
          containerPort: 9933
        - name: subtrate9944
          containerPort: 9944
        - name: subtrate30333
          containerPort: 30333
        volumeMounts:
        - name: chain-spec
          mountPath: /aquila-node/config/
        - name: keys-secret
          mountPath: /aquila-node/config/aura-keys.json
          subPath: aura-keys.json
        - name: keys-secret
          mountPath: /aquila-node/config/grandpa-keys.json
          subPath: grandpa-keys.json
        - name: docker-run
          mountPath: /aquila-node/config/docker-run.sh
          subPath: docker-run.sh
        - name: networking-key
          mountPath: /aquila-node/config/networking-key
          subPath: networking-key
        - name: persistent-storage
          mountPath: /tmp/node_airtel_05
          subPath: airtelbootnode_05
      volumes:
      - name: keys-secret
        secret:
          secretName: node1-keys
          items:
          - key: aura-keys.json
            path: aura-keys.json
          - key: grandpa-keys.json
            path: grandpa-keys.json
      - name: docker-run
        configMap:
          name: node1-docker-run
          items:
          - key: docker-run.sh
            path: docker-run.sh
            mode: 0555
      - name: networking-key
        configMap:
          name: node1-networking-key
          items:
          - key: networking-key
            path: networking-key
            mode: 0555        
      - name: chain-spec
        emptyDir: {}
      - name: persistent-storage
        persistentVolumeClaim:
          claimName: node1-pvc
---

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: airtel-efs
provisioner: efs.csi.aws.com
---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: node1-airtel-pv
spec:
  capacity:
    storage: 5Gi
  volumeMode: Filesystem
  accessModes:
  - ReadWriteMany
  persistentVolumeReclaimPolicy: Delete
  storageClassName: airtel-efs
  mountOptions:
  - tls
  csi:
    driver: efs.csi.aws.com
    volumeHandle: fs-0e9bb305fa00de0f4
---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: node1-pvc
  namespace: airtel
spec:
  accessModes:
  - ReadWriteMany
  storageClassName: airtel-efs
  resources:
    requests:
      storage: 5Gi
---

# k create secret generic node1-keys --namespace=airtel --from-file=grandpa-keys.json=./grandpa-keys.json --from-file=aura-keys.json=./aura-keys.json
# k create configmap node1-docker-run --namespace=airtel --from-file=docker-run.sh -o yaml --dry-run | k apply -f -
# k create configmap node1-networking-key --namespace=airtel --from-file=networking-key -o yaml --dry-run | k apply -f -
#
# not used
# k create secret generic node1-certs --namespace=airtel --from-file=dhparam.pem=./dhparam.pem --from-file=nginx-selfsigned.crt=./nginx-selfsigned.crt --from-file=nginx-selfsigned.key=./nginx-selfsigned.key
# k create configmap node1-nginx-conf --namespace=airtel --from-file=nginx.conf -o yaml --dry-run | k apply -f -